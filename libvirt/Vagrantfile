Vagrant.configure("2") do |config|

      # Pull the libvirt default network subnet 
  libvirt_xml = `which virsh &>/dev/null && virsh net-dumpxml default 2>/dev/null`
  match = libvirt_xml.match(/ip address=['"](\d+\.\d+\.\d+)\.\d+/)
  abort " Could not find Libvirt default network or get subnet" unless match

  subnet = match[1]
  win_ip = "#{subnet}.10"
  ubuntu_ip = "#{subnet}.20"

    
     
 config.trigger.before :up do |trigger|
  trigger.name = "Securing the Libvirt default network"
  trigger.run = {
    inline: <<-SHELL
      echo " Making /etc/libvirt/qemu/networks/default.xml file unmodifiable"
      if [ -f /etc/libvirt/qemu/networks/default.xml ]; then
        sudo chattr +i /etc/libvirt/qemu/networks/default.xml
      fi
    SHELL
  }
end
  #  WINVM
  config.vm.define "winvm", autostart: false do |win|

    win.vm.box = "tonyclemmey/windows11"
    win.vm.network "forwarded_port", guest: 80, host: 8080
    win.vm.network "private_network", ip: win_ip

    win.vm.synced_folder File.expand_path("../images", __dir__), "C:/users/vagrant/shared_f", type: "rsync", disabled: false
    win.vm.synced_folder File.expand_path("../libvirt/scriptswin", __dir__), "C:/vagrant/scripts", type: "rsync"

    win.vm.provision "shell", inline: <<-SHELL
      echo "Shared folder is ready after rsync."
    SHELL
	
    win.vm.provision "shell", privileged: true, inline: <<-SHELL
      $url = "https://raw.githubusercontent.com/ansible/ansible-documentation/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
      $file = "C:\\Windows\\Temp\\ConfigureRemotingForAnsible.ps1"
      Invoke-WebRequest -Uri $url -OutFile $file
      powershell.exe -ExecutionPolicy Bypass -File $file
    SHELL

    win.vm.provision "shell", privileged: true, inline: <<-SHELL
      powershell.exe -ExecutionPolicy Bypass -File "C:\\vagrant\\scripts\\install_qemu.ps1"
    SHELL

    win.vm.provision "shell", privileged: true, inline: <<-SHELL
      powershell.exe -ExecutionPolicy Bypass -File "C:\\users\\vagrant\\shared_f\\download.ps1"
    SHELL


    win.vm.provider "libvirt" do |v|
      v.memory = 16384
      v.cpus = 4
      v.storage :file, path: 'lastden.qcow2', device: 'vdb', bus: 'virtio', type: 'qcow2', size: '25G'
      v.management_network_device = "tap0"
    end
  end

  # UBUNTU VM
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.provider "libvirt"
    ubuntu.vm.box = "generic-x64/ubuntu2204"
    ubuntu.vm.network "private_network", ip: ubuntu_ip
    ubuntu.vm.synced_folder ".", "/vagrant"
    ubuntu.vm.synced_folder File.expand_path("../images", __dir__), "/home/vagrant/shared_images", type: "rsync"

    ubuntu.vm.provision "shell", inline: <<-SHELL
      echo "Ansible is installing..."
      sudo apt update
      sudo apt install -y ansible
      sudo apt-get install -y sshpass
    SHELL
	
	
      ubuntu.trigger.before :up do |trigger|
	  trigger.name = "Writing win_ip address to hosts.ini file"
	  trigger.run = {
	    inline: %Q{
	      sed -i '2s/.*/#{win_ip}/' ./scriptsdeb/hosts.ini
	    }
	  }
	end
	
	ubuntu.trigger.before :up do |trigger|
	      trigger.name = "Starting winvm first"
	      trigger.run = {
		inline: "vagrant up winvm"
	      }
	 end
	 
	ubuntu.trigger.before :up do |trigger|
	  trigger.name = "Writing win_ip address to hosts.ini file"
	  trigger.run = {
	    inline: %Q{
	      sed -i '2s/.*/#{win_ip}/' ./scriptsdeb/hosts_win.ini
	    }
	  }
	end

      ubuntu.trigger.after :up do |trigger|
        trigger.name = "Shrink disk in windows"
       trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_win.ini /vagrant/scriptsdeb/shrink_disk.yml"]
    }
      end
      ubuntu.trigger.after :up do |trigger|
        trigger.name = "Copy disks in windows to OMV drive"
        trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_win.ini /vagrant/scriptsdeb/copy_disks.yml"]
    }
      end
      ubuntu.trigger.after :up do |trigger|
        trigger.name = "start vm boot trigger on windows"
        trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_win.ini /vagrant/scriptsdeb/start_vm.yml"]
    }
      end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "Stopping Windows VM"
    trigger.run = { inline: "vagrant halt winvm" }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "Starting Debian automatic installation"
    trigger.run = { inline: "bash ./preseed/auto_debian_install.sh" }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "Waiting for installation to complete"
    trigger.run = { inline: "sleep 60" }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "install_qemu_on_debian.yml çalıştırılıyor"
    trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/install_qemu_on_debian.yml"]
    }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "Running start_vm_when_reboot_debian.yml"
    trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/start_vm_when_reboot_debian.yml"]
    }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "Running change_vda.yml"
    trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/change_vda.yml"]
    }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "Running shutdown_lin.yml"
    trigger.run = {
      inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/shutdown_lin.yml"]
    }
  end

  ubuntu.trigger.after :up do |trigger|
    trigger.name = "undefining debian-in-windows VM"
    trigger.run = {
      inline: <<-SHELL
        virsh undefine debian-in-windows --nvram
      SHELL
    }
  end
  
  ubuntu.trigger.after :up do |trigger|
     trigger.name = "Setting boot order on libvirt winvm VM"
     trigger.run = {
       inline: "bash ./change_boot.sh"
     }
   end
end

end
