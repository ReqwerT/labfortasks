# Vagrantfile
# Defines Ubuntu & Windows11 VMs with dynamic IP assignment based on libvirt URI

require 'shellwords'
require 'socket'
require 'ipaddr'

# Helper methods
# Fetch the CIDR of a given bridge device
def fetch_bridge_cidr(device)
  cidr = `ip -4 addr show dev #{device}`.match(/inet\s(\d+\.\d+\.\d+\.\d+\/\d+)/)&.[](1)
  raise "Bridge interface '#{device}' bulunamadı veya IPv4 yok" if cidr.nil? || cidr.empty?
  cidr
end

# Display detailed information for a given bridge device
def show_bridge_info(device)
  puts "=== Bridge Info: #{device} ==="
  puts `ip addr show dev #{device}`
  puts `bridge link show dev #{device}` rescue puts "bridge link not available"
  puts `brctl show #{device}` rescue puts "brctl not installed or bridge not found"
end

# Calculate a VM IP by adding offset to the network's first address
def calculate_vm_ip(bridge_cidr, offset)
  network = IPAddr.new(bridge_cidr)
  IPAddr.new(network.to_range.begin.to_i + offset, Socket::AF_INET).to_s
end

Vagrant.configure("2") do |config|
  # Determine connection mode
  is_root = Process.uid.zero?
  uri     = is_root ? "qemu:///system" : "qemu:///session"

  # Choose initial bridge device
  bridge_device = uri.include?("session") ? 'virbr0' : `virsh -c #{Shellwords.escape(uri)} net-dumpxml default`.match(/<bridge name=['\"]([^'\"]+)['\"]/i)[1]

  # Show bridge details for debugging
  show_bridge_info(bridge_device)

  # Ensure the bridge exists; if not, attempt to start the default network
  unless system("ip link show dev #{bridge_device} >/dev/null 2>&1")
    puts "Bridge #{bridge_device} bulunamadı; libvirt 'default' ağını başlatmayı deniyorum..."
    system("sudo virsh -c qemu:///system net-start default")
    sleep 2
  end

  # Fetch the CIDR after bridge is up
  bridge_cidr = fetch_bridge_cidr(bridge_device)

  # ----------------------- Ubuntu VM -----------------------
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.box      = "generic-x64/ubuntu2204"
    ubuntu.vm.hostname = "debian12"

    ubuntu.vm.provider :libvirt do |libvirt|
      libvirt.uri                       = uri
      libvirt.system_uri                = "qemu:///system"
      libvirt.qemu_use_session          = !is_root
      libvirt.management_network_device = bridge_device
    end

   # IP hesaplaması
    vm_ip = calculate_vm_ip(bridge_cidr, 20)

    # Ağa bağlanma
    if is_root
      # Root: default NAT ağı
      ubuntu.vm.network "private_network",
                        libvirt__network_name: "default",
                        ip:                    vm_ip,
                        libvirt__always_destroy: false
    else
      # Non‑root: doğrudan virbr0 bridge’i
      ubuntu.vm.network "public_network",
                        type:  "bridge",
                        dev:   bridge_device,   # genelde "virbr0"
                        ip:    vm_ip,
                        libvirt__always_destroy: false
    end
   ubuntu.vm.synced_folder ".", "/vagrant"
    ubuntu.vm.synced_folder File.expand_path("../images", __dir__), "/home/vagrant/shared_images", type: "rsync"

        ubuntu.vm.provision "shell", inline: <<-SHELL
        echo "Ansible is installing..."
        sudo apt update
        sudo apt install -y ansible
        sudo apt-get install -y sshpass
        SHELL


        ubuntu.trigger.before :up do |trigger|
        trigger.name = "Writing win_ip address to hosts.ini file"
        trigger.run = {
            inline: %Q{
            sed -i '2s/.*/#{calculate_vm_ip(bridge_cidr, 10)}/' ./scriptsdeb/hosts.ini
            }
        }
        end


         ubuntu.trigger.before :up do |trigger|
            trigger.name = "Installing OMV VM first"
            trigger.run  = {
              inline: "bash ./omv/auto_omv_install.sh"
            }
          end

         ubuntu.trigger.after :up do |trigger|
            trigger.name = "Installing OMV first"
            trigger.run = {
                inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_omv.ini /vagrant/scriptsdeb/omv.yml"]
                }
        end


        ubuntu.trigger.after :up do |trigger|
            trigger.name = "Installing OMV first"
            trigger.run = {
                inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_omv.ini /vagrant/scriptsdeb/change_network_nat.yml"]
                }
        end


        ubuntu.trigger.after :up do |trigger|
          trigger.name = "undefining debian-in-windows VM"
          trigger.run = {
            inline: <<-SHELL
              virsh undefine preseed-in-windows --nvram
          SHELL
          }
      end

        ubuntu.trigger.after :up do |trigger|
            trigger.name = "Starting winvm first"
            trigger.run = {
            inline: "vagrant up winvm"
            }
        end



        ubuntu.trigger.after :up do |trigger|
        trigger.name = "Writing win_ip address to hosts.ini file"
        trigger.run = {
            inline: %Q{
            sed -i '2s/.*/#{calculate_vm_ip(bridge_cidr, 10)}/' ./scriptsdeb/hosts_win.ini
            }
        }
        end

        ubuntu.trigger.after :up do |trigger|
            trigger.name = "Shrink disk in windows"
        trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_win.ini /vagrant/scriptsdeb/shrink_disk.yml"]
        }

        end
        ubuntu.trigger.after :up do |trigger|
            trigger.name = "Copy disks in windows to OMV drive"
            trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_win.ini /vagrant/scriptsdeb/copy_disks.yml"]
        }
        end
        ubuntu.trigger.after :up do |trigger|
            trigger.name = "start vm boot trigger on windows"
            trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts_win.ini /vagrant/scriptsdeb/start_vm.yml"]
        }
        end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Stopping Windows VM"
        trigger.run = { inline: "vagrant halt winvm" }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Starting Debian automatic installation"
        trigger.run = { inline: "bash ./preseed/auto_debian_install.sh" }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Waiting for installation to complete"
        trigger.run = { inline: "sleep 60" }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "install_qemu_on_debian.yml çalıştırılıyor"
        trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/install_qemu_on_debian.yml"]
        }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Running start_vm_when_reboot_debian.yml"
        trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/start_vm_when_reboot_debian.yml"]
        }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Running change_vda.yml"
        trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/change_vda.yml"]
        }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Running shutdown_lin.yml"
        trigger.run = {
        inline: %q[vagrant ssh ubuntu -c "ansible-playbook -i /vagrant/scriptsdeb/hosts.ini /vagrant/scriptsdeb/shutdown_lin.yml"]
        }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "undefining debian-in-windows VM"
        trigger.run = {
        inline: <<-SHELL
            virsh undefine debian-in-windows --nvram
        SHELL
        }
    end

    ubuntu.trigger.after :up do |trigger|
        trigger.name = "Setting boot order on libvirt winvm VM"
        trigger.run = {
        inline: "bash ./change_boot.sh"
        }
    end



  end

  # --------------------- Windows11 VM ---------------------
  config.vm.define "winvm" , autostart: false do |win|
    win.vm.box      = "tonyclemmey/windows11"
    win.vm.hostname = "winvm"

    win.vm.provider :libvirt do |libvirt|
      libvirt.uri                       = uri
      libvirt.system_uri                = "qemu:///system"
      libvirt.qemu_use_session          = !is_root
      libvirt.management_network_device = bridge_device
      libvirt.autostart                 = false
      libvirt.memory = 16384
      libvirt.cpus = 4
      libvirt.storage :file,   path: 'lastden.qcow2', device: 'vdb', bus: 'virtio', type: 'qcow2', size: '25G'
    end

    # …
    vm_ip = calculate_vm_ip(bridge_cidr, 10)

    if is_root
      win.vm.network "private_network",
                     libvirt__network_name: "default",
                     ip:                    vm_ip,
                     libvirt__always_destroy: false
    else
      win.vm.network "public_network",
                     type:  "bridge",
                     dev:   bridge_device,
                     ip:    vm_ip,
                     libvirt__always_destroy: false
    end
     win.vm.synced_folder File.expand_path("../libvirt/omv", __dir__), "C:/users/vagrant/shared_f", type: "rsync", disabled: false
     win.vm.synced_folder File.expand_path("../libvirt/scriptswin", __dir__), "C:/vagrant/scripts", type: "rsync"







    win.vm.provision "shell", inline: <<-SHELL
      echo "Shared folder is ready after rsync."
    SHELL

    win.vm.provision "shell", privileged: true, inline: <<-SHELL
      $url = "https://raw.githubusercontent.com/ansible/ansible-documentation/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
      $file = "C:\\Windows\\Temp\\ConfigureRemotingForAnsible.ps1"
      Invoke-WebRequest -Uri $url -OutFile $file
      powershell.exe -ExecutionPolicy Bypass -File $file
    SHELL

    win.vm.provision "shell", privileged: true, inline: <<-SHELL
      powershell.exe -ExecutionPolicy Bypass -File "C:\\vagrant\\scriptswin\\install_qemu.ps1"
    SHELL


  end



end
